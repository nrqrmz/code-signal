grid_one = [['.', '.', '.', '1', '4', '.', '.', '2', '.'],
            ['.', '.', '6', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '1', '.', '.', '.', '.', '.', '.'],
            ['.', '6', '7', '.', '.', '.', '.', '.', '9'],
            ['.', '.', '.', '.', '.', '.', '8', '1', '.'],
            ['.', '3', '.', '.', '.', '.', '.', '.', '6'],
            ['.', '.', '.', '.', '.', '7', '.', '.', '.'],
            ['.', '.', '.', '5', '.', '.', '.', '7', '.']]

grid_two = [['.', '.', '.', '.', '2', '.', '.', '9', '.'],
            ['.', '.', '.', '.', '6', '.', '.', '.', '.'],
            ['7', '1', '.', '.', '7', '5', '.', '.', '.'],
            ['.', '7', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '8', '3', '.', '.', '.'],
            ['.', '.', '8', '.', '.', '7', '.', '6', '.'],
            ['.', '.', '.', '.', '.', '2', '.', '.', '.'],
            ['.', '1', '.', '2', '.', '.', '.', '.', '.'],
            ['.', '2', '.', '.', '3', '.', '.', '.', '.']]

grid_thr = [[".", "4", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", "4", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", "1", ".", ".", "7", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", "3", ".", ".", ".", "6", "."],
            [".", ".", ".", ".", ".", "6", ".", "9", "."],
            [".", ".", ".", ".", "1", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "2", ".", "."],
            [".", ".", ".", "8", ".", ".", ".", ".", "."]]


def solution(grid)
  grid.map do |line|
    line.each do |char|
      return false if line.count(char) > 1 && char != '.'
    end
  end

  grid.transpose.map do |line|
    line.each do |char|
      return false if line.count(char) > 1 && char != '.'
    end
  end

  get_cells(grid).each do |line|
    line.each do |char|
      return false if line.count(char) > 1 && char != '.'
    end
  end

  true
end

def get_cells(g)
  [
    [g[0][0], g[0][1], g[0][2], g[1][0], g[1][1], g[1][2], g[2][0], g[2][1], g[2][2]],
    [g[0][3], g[0][4], g[0][5], g[1][3], g[1][4], g[1][5], g[2][3], g[2][4], g[2][5]],
    [g[0][6], g[0][7], g[0][8], g[1][6], g[1][7], g[1][8], g[2][6], g[2][7], g[2][8]],
    [g[3][0], g[3][1], g[3][2], g[4][0], g[4][1], g[4][2], g[5][0], g[5][1], g[5][2]],
    [g[3][3], g[3][4], g[3][5], g[4][3], g[4][4], g[4][5], g[5][3], g[5][4], g[5][5]],
    [g[3][6], g[3][7], g[3][8], g[4][6], g[4][7], g[4][8], g[5][6], g[5][7], g[5][8]],
    [g[6][0], g[6][1], g[6][2], g[7][0], g[7][1], g[7][2], g[8][0], g[8][1], g[8][2]],
    [g[6][3], g[6][4], g[6][5], g[7][3], g[7][4], g[7][5], g[8][3], g[8][4], g[8][5]],
    [g[6][6], g[6][7], g[6][8], g[7][6], g[7][7], g[7][8], g[8][6], g[8][7], g[8][8]],

  ]
end

p solution grid_one
puts ''
p solution grid_two
puts
p solution grid_thr

# image = [[1, 2, 3],
#          [4, 5, 6],
#          [7, 8, 9]]

# p image
# p image.transpose

arr << matrix[i][j] == matrix[i + 1][j + 1]
